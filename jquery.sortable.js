/*Copyright (c) 2010, rohm1 <rp@rohm1.com>.All rights reserved.Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditionsare met:* Redistributions of source code must retain the above copyrightnotice, this list of conditions and the following disclaimer.* Neither the name of rohm1 nor the names of hiscontributors may be used to endorse or promote products derivedfrom this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOTLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THECOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVERCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICTLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING INANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THEPOSSIBILITY OF SUCH DAMAGE.*/(function($, undefined) {	$.fn.extend({		sortable: function(params) {			var dropArea = testParam(params, 'dropArea') ? $(params.dropArea) : $(this).eq(0).parent();			$(this).each(function() {				$(this)					.addClass("sortable")					.draggable(params)					.bind('isDragged', function(e, data) {						if(data.state) {							$('<div class="target" />')								.css({height: $(this).height(), margin: $(this).css('margin'), padding: $(this).css('padding')})								.insertAfter($(this));							dropArea.bind('mousecollide', function(e, data) {								if(data.state) {									if($(this).find('.sortable:not(.dragged)').length == 0)										$(this).append($('.target').eq(0));									else {										$(this).bind('mouseGlobalMove', function(e, data) {											var lastElt = $(this).find('.sortable:not(.dragged)').last();											if(data.y > lastElt.offset().top + lastElt.outerHeight(true))												$('.target').eq(0).insertAfter($(this).find('.sortable:not(.dragged)').last());											else												$(this).find('.sortable:not(.dragged)').each(function() {													var oheight = $(this).outerHeight(true);													var top = $(this).offset().top;													if(data.y > top && data.y < top + oheight / 2)														$('.target').eq(0).insertBefore($(this));													else if(data.y > top + oheight / 2 && data.y < top + oheight)														$('.target').eq(0).insertAfter($(this));												});										});									}								}								else {									$(this).unbind('mouseGlobalMove');								}							});						}						else {							dropArea.unbind();							$(this).insertAfter($('.target').eq(0));							$('.target').remove();						}					});			});		},		draggable: function(params) {			var elt = $(this),				offset = $(this).offset(),				anchor = testParam(params, 'anchor') ? $(this).find(params.anchor).eq(0) : $(this);			elt.addClass('draggable');			anchor				.addClass('anchor')				.mousedown(function(e) {					var offset = elt.offset();					elt						.data('clickCoords', {x: e.pageX - offset.left, y: e.pageY - offset.top})						.startDrag(params);				});			$('*').live('mouseup', function(e) {				elt.stopDrag();			});			return $(this);		},		startDrag: function(params) {			var showContent = testParam(params, 'showContent') ? params.showContent : true,				axis = testParam(params, 'axis') && $.inArray(params.axis, ['x', 'y']) != -1 ? params.axis : 'none';			if(showContent) {				var elt = $(this);			}			else {				var elt = $('<div class="dragged overlay" />')					.css({width: $(this).width(), height: $(this).height(), margin: $(this).css('margin'), padding: $(this).css('padding')})					.insertAfter($(this));			}			elt				.data('clickCoords', $(this).data('clickCoords'))				.css($(this).offset())				.bind('mouseGlobalMove', function(e, data) {					if(axis == 'y' || axis == 'none')						$(this).css({"top": data.y - $(this).data('clickCoords').y});					if(axis == 'x' || axis == 'none')						$(this).css({"left": data.x - $(this).data('clickCoords').x});					window.getSelection().removeAllRanges();				});			$(this).addClass('dragged');			if(!showContent)				$(this).hide();		},		stopDrag: function() {			$(this)				.removeClass('dragged')				.unbind('mouseGlobalMove')				.show();			$('.overlay').remove();		},	});	$.event.special.mousecollide = {		setup: function() {			var elt = $(this);			elt.data('mousecollide.state', null);			elt.data('mousecollide.interval', setInterval(function() {				var newState = null,					e = $.mousePosition,					offset = elt.offset();				if(e.x >= offset.left && e.x <= (offset.left + elt.outerWidth(true)) && e.y >= offset.top && e.y <= (offset.top + elt.outerHeight(true)))					newState = true;				else					newState = false;				if(newState != elt.data('mousecollide.state')) {					elt.data('mousecollide.state', newState);					elt.triggerHandler('mousecollide', {state: newState});				}			}, 20));		},		teardown: function() {			clearInterval($(this).data('mousecollide.interval'));			$(this).removeData('mousecollide.interval');			$(this).removeData('mousecollide.state');		}	};	$.event.special.mouseGlobalMove = {		setup: function() {			var $this = $(this);			$this.data('mouseGlobalMove.state', {x: -1, y: -1});			$(this).data('mouseGlobalMove.interval', setInterval(function() {				if($.mousePosition.x != $this.data('mouseGlobalMove.state').x || $.mousePosition.y != $this.data('mouseGlobalMove.state').y) {					$this.data('mouseGlobalMove.state', $.mousePosition);					$this.triggerHandler('mouseGlobalMove', {x: $.mousePosition.x, y: $.mousePosition.y});				}			}, 20));		},		teardown: function() {			clearInterval($(this).data('mouseGlobalMove.interval'));			$(this).removeData('mouseGlobalMove.interval');			$(this).removeData('mouseGlobalMove.state');		}	};	$.event.special.isDragged = {		setup: function() {			var $this = $(this);			$this.data('isDragged.state', null);			$(this).data('isDragged.interval', setInterval(function() {				var newState = $this.hasClass('dragged');				if(newState != $this.data('isDragged.state')) {					$this.data('isDragged.state', newState);					$this.triggerHandler('isDragged', {state: newState});				}			}, 50));		},		teardown: function() {			clearInterval($(this).data('isDragged.interval'));			$(this).removeData('isDragged.interval');			$(this).removeData('isDragged.state');		}	};	$(document).live('mousemove', function(e) {		$.mousePosition = {x: e.pageX, y: e.pageY};	});})(jQuery);function testParam(paramsList, paramName) {	return paramsList != undefined && paramsList[paramName] != undefined;}